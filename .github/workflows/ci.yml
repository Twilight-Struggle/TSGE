name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build_type: [Debug, Release]
        compiler: [clang]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-18
        
    - name: Setup compiler
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        
    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DENABLE_TESTING=ON
          
    - name: Build
      run: cmake --build build
      
    - name: Run tests
      run: ctest --test-dir build --output-on-failure
      
  coverage:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-18 llvm-18
        
    - name: Setup compiler
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-18 100
        sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-18 100
        
    - name: Configure CMake with coverage
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TESTING=ON \
          -DENABLE_COVERAGE=ON
          
    - name: Build
      run: cmake --build build

    - name: Run tests and generate coverage
      run: |
        # プロファイルファイルのパスを絶対パスで指定
        export LLVM_PROFILE_FILE=$PWD/build/test_%p.profraw
        
        # テストを実行
        ctest --test-dir build --output-on-failure
        
        # プロファイルファイルを確認
        echo "Profile files:"
        ls -la *.profraw || echo "No .profraw files found in current directory"
        ls -la build/*.profraw || echo "No .profraw files found in build directory"
        
        # プロファイルデータをマージ（複数のプロファイルファイルに対応）
        llvm-profdata merge -sparse build/*.profraw -o default.profdata
        
        # lcov形式のカバレッジレポートを生成
        llvm-cov export \
          -format=lcov \
          -instr-profile=default.profdata \
          -object ./build/board_test \
          -object ./build/command_test \
          -object ./build/legal_moves_generator_test \
          -object ./build/move_test \
          -object ./build/phase_machine_test \
          -object ./build/world_map_test \
          -object ./build/country_test \
          -object ./build/trackers_test \
          -object ./build/cards_test \
          -object ./build/deck_test \
          > coverage.lcov

        # lcovファイルの内容を確認（デバッグ用）
        echo "=== LCOV file first 100 lines ==="
        head -n 100 coverage.lcov || true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.lcov
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        slug: ${{ github.repository }}
        token: ${{ secrets.CODECOV_TOKEN }}
        
  clang-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-18
        
    - name: Setup tools
      run: |
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-18 100
        
    - name: Check formatting
      run: |
        find . -name "*.cpp" -o -name "*.hpp" | grep -v build | grep -v .external | while read file; do
          clang-format --dry-run --Werror "$file"
        done

    - name: Show diff on failure
      if: failure()
      run: |
        find . -name "*.cpp" -o -name "*.hpp" | grep -v build | grep -v .external | while read file; do
          echo "=== Checking $file ==="
          clang-format "$file" | diff -u "$file" - || true
        done
        
  clang-tidy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-18 clang-tidy-18
        
    - name: Setup tools
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-18 100
        
    - name: Configure CMake (for compile_commands.json)
      run: cmake -B build -G Ninja
      
    - name: Run clang-tidy
      run: |
        find src include -name "*.cpp" -o -name "*.hpp" | grep -v build | while read file; do
          clang-tidy -p build "$file"
        done
        
  sanitizers:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang-18
        
    - name: Setup compiler
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
        
    - name: Configure CMake with sanitizers
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TESTING=ON \
          -DENABLE_SANITIZERS=ON
          
    - name: Build
      run: cmake --build build
      
    - name: Run tests with sanitizers
      run: |
        export ASAN_OPTIONS=detect_leaks=1:check_initialization_order=1:strict_init_order=1
        export UBSAN_OPTIONS=print_stacktrace=1:halt_on_error=1
        ctest --test-dir build --output-on-failure